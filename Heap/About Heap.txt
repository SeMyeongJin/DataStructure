이진 트리의 하나인 히프(Heap)
루트 노드가 언제나 그 트리의 최댓값 혹은 최솟값을 가진다는 독특한 특성
루트 노드가 최댓값을 가지는 히프를 최대 히프라 하고
루트 노드가 최솟값을 가지는 히프를 최소 히프라 한다.

트리의 모든 노드가 자신의 자식 노드보다 그 값이 최대 히프일 경우 크고,
트리의 모든 노드가 자신의 자식 노드보다 그 값이 최소 히프일 경우 작습니다.

히프는 최소 트리 혹은 최대 트리의 특성을 갖고 있지만, 한가지 조건을 더 만족해야 합니다.
바로, 히프는 완전 이진 트리이어야만 합니다.

모든 노드에 대응하는 것이 아닌 각 노드는 자신의 자식 노드보다 키 값이 크거나 작아야 합니다.
히프는 중복된 키 값을 허용합니다.

최대 히프에서의 삽입 연산
새로운 노드가 추가되면 트리의 가장 마지막 자리에 임시로 저장합니다.
새로 추가된 노트와 이 노드의 부모 노드 사이의 키 값을 비교합니다.
조건이 만족할 경우 새로 추가된 노드와 부모 노드의 위치를 교환합니다.
위치를 변경한 이후에도 여전히 부모 노드의 키 값보다 클 경우 한번 더 위치를 교환합니다.
즉, 키 값이 더 큰 부모 노드를 만날 때까지 부모 노드와 위치를 교환합니다.
루트 노드까지 이동했으면, 더 이동할 필요는 없습니다.

최대 히프에서의 삭제 연산
히프에서 노드의 삭제는 오직 루트 노드만 가능합니다.
1. 루트 노드의 삭제
2. 트리 마지막 자리 노드의 임시 루트로 이동
3. 자식 노드와 키 값 비교 및 이동

삽입 연산과 삭제 연산은 '완전 이진 트리 형태로 저장된 덕분에 시간 복잡도 O(log n)을 가집니다.

배열로 구현 시 계산의 편의성을 위해 배열의 첫 번째 원소는 사용하지 않는다고 가정합니다.
노드 i의 부모 노드 인덱스는 i/2 입니다.
노드 i의 왼쪽 자식 노드 인덱스는 i * 2입니다.
노드 i의 오른쪽 자식 노드 인덱스는 i * 2 + 1 입니다.